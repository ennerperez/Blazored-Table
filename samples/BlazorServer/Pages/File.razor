@page "/file"
@using System.Collections.ObjectModel
@using System.ComponentModel
@using System.ComponentModel.DataAnnotations
@using System.IO
@using System.Linq.Expressions
@using System.Reflection
@using Blazored.Table.Models
@using BlazorServer.Data.Entities

<h1>Blazored Table Sample</h1>

<hr class="mb-5"/>

<p>
    This is an example of using Blazored Table with file source.
</p>

<BlazoredTable Id="Example2" DataSource="Employees" Columns="Columns"/>

@code {

    public static ObservableCollection<TableColumn> Columns { get; set; }
    public static Expression<Func<Employee, object>> Selector { get; set; }
    
    [Parameter]
    public ObservableCollection<object> Employees { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        var dir = Path.Combine(Directory.GetCurrentDirectory(), "employees.json");
        var json = System.IO.File.ReadAllText(dir);
        var data = Newtonsoft.Json.JsonConvert.DeserializeObject<IEnumerable<Employee>>(json);
        if (data != null) Employees = new ObservableCollection<object>(data);

        Selector = s => new {s.Id, s.FirstName, s.LastName, s.Office, s.Position, s.StartDate, s.Salary};

        var columns = typeof(Employee).GetProperties().Select(m => new
        {
            m.Name,
            Data = char.ToLower(m.Name[0]) + m.Name.Substring(1),
            Display = m.GetCustomAttribute<DisplayNameAttribute>()?.DisplayName ?? m.Name,
            Format = m.GetCustomAttribute<DisplayFormatAttribute>()?.DataFormatString ?? "{0:0.00}",
        });
        Columns = new ObservableCollection<TableColumn>(columns.Select(m => new TableColumn() {Title = m.Display, Data = m.Data, Name = m.Name, Format = m.Format}));

        await base.OnInitializedAsync();
    }
}