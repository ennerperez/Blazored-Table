@page "/blazor"
@using System.Collections.ObjectModel
@using System.ComponentModel
@using System.Linq.Expressions
@using System.Reflection
@using DataTables.Blazored.Models
@using BlazorShared.Data.Entities
@using BlazorServer.Interfaces
@using Microsoft.AspNetCore.Http
@using System.Text.Json
@inject IHttpContextAccessor _httpContextAccessor
@inject IEmployeeRepository _employeeRepository

<h1>DataTable Blazored Sample</h1>

<hr class="mb-5"/>

<p>
    This is an example of using Blazored Table in its most simplistic form.
</p>

<DataTable Columns="Columns" Settings="Settings" OnLoad="GetData" ColumnsDefs="ColumnsDefs" OnRowSelected="RowSelected" @ref="_table" />

@code {

    public TableSettings Settings { get; set; }
    
    public ObservableCollection<TableColumn> Columns { get; set; }
    public ObservableCollection<TableColumnDefs> ColumnsDefs { get; set; }
    public Expression<Func<Employee, object>> Selector { get; set; }
    private DataTable _table;

    protected override async Task OnInitializedAsync()
    {
        Selector = s => new {s.Id, s.FirstName, s.LastName, s.Office, s.Position, s.StartDate, s.Salary};

        var columns = typeof(Employee).GetProperties().Select(m => new
        {
            m.Name,
            Data = char.ToLower(m.Name[0]) + m.Name.Substring(1),
            Display = m.GetCustomAttribute<DisplayNameAttribute>()?.DisplayName ?? m.Name,
            Format = "" //m.GetCustomAttribute<DisplayFormatAttribute>()?.DataFormatString ?? "{0:0.00}",
        });
        Columns = new ObservableCollection<TableColumn>(columns.Select(m => new TableColumn() {Title = m.Display, Data = m.Data, Name = m.Name, Format = m.Format}));
        //ColumnsDefs = new ObservableCollection<TableColumnDefs>();
        //ColumnsDefs.Add(new TableColumnDefs() { Data = null, ClassName = "TEST", DefaultContent = "<a class='btn btn-sm btn-primary'>Test</a>", Targets = "6", Visible = true });
        
        Settings = Settings = new TableSettings()
        {
            Columns = Columns,
            ColumnsDefs = ColumnsDefs,
            Ordering = true,
            DeferRender = true,
            Scroller = true,
            ScrollY = "350px",
            ServerSide = false
        };
        
        await base.OnInitializedAsync();
    }

    public async Task<TableResult> GetData(TableRequestViewModel request = null)
    {
        var data = await _employeeRepository.GetDataAsync(request, Selector);
        return data;
    }

    public async Task<bool> RowSelected(object t)
    {
        await Task.Delay(1);
        var options = new JsonSerializerOptions() { PropertyNameCaseInsensitive = true };
        var data = JsonSerializer.Deserialize<Employee>(t.ToString(), options);
        return true;
    }

}