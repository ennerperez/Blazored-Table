@page "/blazor"
@using System.Collections.ObjectModel
@using System.ComponentModel
@using System.Linq.Expressions
@using System.Reflection
@using DataTables.Blazored.Models
@using BlazorShared.Data.Entities
@using BlazorServer.Interfaces
@using Microsoft.AspNetCore.Http
@using System.Text.Json
@using DataTables.Blazored.Interop
@inject IHttpContextAccessor _httpContextAccessor
@inject IEmployeeRepository _employeeRepository

<h1>DataTable Blazored Sample</h1>

<hr class="mb-5"/>

<p>
    This is an example of using Blazored Table in its most simplistic form.
</p>

<DataTable Settings="Settings" OnLoad="GetData" @ref="_table">
    <Column Title="Id" Name="Id" Data="id" Visible="false" />
    <Column Title="First Name" Name="FirstName" Data="firstName" />
    <Column Title="Last Name" Name="LastName" Data="lastName" />
    <Column Title="Office" Name="Office" Data="office" />
    <Column Title="Position" Name="Position" Data="position" />
    <Column Title="Start Date" Name="StartDate" Data="startDate" Render="@("blazor.renderDate")" />
    <Column Title="Salary" Name="Salary" Data="salary" />
</DataTable>

@code {

    public Settings Settings { get; set; }
    public Expression<Func<Employee, object>> Selector { get; set; }
    private DataTable _table;

    protected override async Task OnInitializedAsync()
    {
        Selector = s => new {s.Id, s.FirstName, s.LastName, s.Office, s.Position, s.StartDate, s.Salary};
        
        Settings = new Settings()
        {
            Scroller = true,
            ScrollY = "350px",
            ServerSide = true
        };
        
        await base.OnInitializedAsync();
    }

    public async Task<Result> GetData(Request request = null)
    {
        var data = await _employeeRepository.GetDataAsync(request, Selector);
        return data;
    }

    public async Task<bool> RowSelected(object t)
    {
        await Task.Delay(1);
        var options = new JsonSerializerOptions() { PropertyNameCaseInsensitive = true };
        var data = JsonSerializer.Deserialize<Employee>(t.ToString() ?? string.Empty, options);
        return true;
    }

}